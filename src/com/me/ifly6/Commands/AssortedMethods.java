package com.me.ifly6.Commands;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Writer;

import com.me.ifly6.Info;
import com.me.ifly6.TextProc;

public class AssortedMethods extends TextProc {
	// Name: Non-Core Methods

	private static final long serialVersionUID = 1L;

	public static void save() throws IOException {
		log("Display Saving System Invoked.");
		mkdir();
		Writer writer = null;
		File file = new File("/Users/" + userName + "/Library/Application Support/iUtilities/report_display-out" + System.currentTimeMillis() + ".txt");
		writer = new BufferedWriter(new FileWriter(file));
		writer.write(display.getText());
		writer.close();
		append("Contents Exported.");
	}
	public static void script() {
		append("** Function Not Yet Built");
		log.append("Script Look Executed. May or may not have run.");
		// Some stuff.
	}
	public static void mindterm() throws IOException {
		mkdir();
		String[] url = { "curl", "-o", "/Users/" + userName + 
				"/Library/Application Support/iUtilities/mindterm.jar", "http://ifly6.no-ip.org/Public/mindterm.jar" };
		rt.exec(url);
		log.append("\nMindterm Download Commenced.");
		append("Mindterm Downloaded to: " + IUTILITIES_DIR);
		append("Mindterm Downloaded to: " + IUTILITIES_DIR + "\nThis is a full Java Based SSH/Telnet Client, capable of using SSH -D." +
				"\nIt is however, not made by the iUtilities Team, and therefore, does not fall under our perview.");
	}
	public static void purge() throws IOException {
		log("Inactive Memory Purged");
		append("" + computername + "~ $ purge");
		log("Mindterm Download Invoked.");
	}
	public static void saveLog() throws IOException {
		log("iUtilities Log Readout Command Executed");
		mkdir();
		Writer writer = null;
		File file = new File(IUTILITIES_DIR + "/report_log" + System.currentTimeMillis() + ".txt");
		writer = new BufferedWriter(new FileWriter(file));
		writer.write(log.getText());
		writer.close();
		append("Debug Contents Exported to File in: " + IUTILITIES_DIR);
	}
	public static void info() throws InterruptedException, IOException{
		log("System Readout Invoked.");
		setText(null);
		append("Generated By: " + Info.version + " '" + Info.password + "' \n");
		append(" -- Current Running Processes -- ");
		String[] com = { "ps", "ax" };
		String[] com1 = { "ifconfig" };
		String[] com2 = { "lsof", "-i" };
		Process proc = rt.exec(com);
		Process proc1 = rt.exec(com1);
		Process proc2 = rt.exec(com2);

		InputStream stderr = proc.getInputStream();
		InputStreamReader isr = new InputStreamReader(stderr);
		BufferedReader br = new BufferedReader(isr);
		String line = null;
		while ((line = br.readLine()) != null) {
			append(line); }

		InputStream stderr1 = proc1.getInputStream();
		InputStreamReader isr1 = new InputStreamReader(stderr1);
		BufferedReader br1 = new BufferedReader(isr1);
		String line1 = null;
		append(" -- Internet Interface Information -- ");
		while ((line1 = br1.readLine()) != null) {
			append(line1); }

		InputStream stderr2 = proc2.getInputStream();
		InputStreamReader isr2 = new InputStreamReader(stderr2);
		BufferedReader br2 = new BufferedReader(isr2);
		String line2 = null;
		append(" -- Processes Information -- ");
		while ((line2 = br2.readLine()) != null) {
			append(line2); }

		// Hardware
		append("Available cores: " + rt.availableProcessors());
		append("Free memory (bytes): " + rt.freeMemory());
		long maxMemory = rt.maxMemory();
		append("Max. memory (Kilobytes): " + maxMemory/1000);
		append("Total memory (Kilobytes): " + (rt.totalMemory()/1000));
		File[] roots = File.listRoots();
		append("");
		for (File root : roots) {
			append("File system root: " + root.getAbsolutePath());
			append("FS Capacity (bytes): " + root.getTotalSpace());
			append("FS Free (bytes): " + root.getFreeSpace());
			append("FS Usable (bytes): " + root.getUsableSpace());
		}
		append("");
		append(System.getProperty("java.runtime.name") + " version " + System.getProperty("java.runtime.version") +
				System.getProperty("java.vm.version") + " by " +
				System.getProperty("java.vm.vendor"));
		append("Execution Directory: " + System.getProperty("user.dir"));
		append("");
		String nameOS = "os.name";
		String versionOS = "os.version";
		append("Operating System: " + System.getProperty(nameOS) + " " + System.getProperty(versionOS));
		append("User: " + System.getProperty("user.name") + " ... with Home at: " + System.getProperty("user.home"));
		append("Desktop: " + System.getProperty("sun.desktop"));
	}
	public static void delete() throws IOException {
		log("iUtilities Folder Deletion Commencing.");
		append("iUtilities Folder Deletion Commencing.");
		String[] delete = {"rm","-rf",(IUTILITIES_DIR)};
		rt.exec(delete);
	}
	public static void terminate() {
		log("\nTermination of Dynamic Programme Switched");
		term_proc();
	}
	public static void update() throws IOException {
		String temp = ("Beginning Update Sequence");
		log(temp);
		append(temp);
		mkdir();
		String[] url = { "curl","-o", IUTILITIES_DIR + "/iUtilities-latest.jar",
		"http://ifly6.no-ip.org/iUtilities/iUtilities-latest.jar" };
		rt.exec(url);
		log("Update Successful.");
		append("iUtilities is updated. New file iUtilities-latest.jar in ~/Library/Application Support/iUtilities");
	}
}
