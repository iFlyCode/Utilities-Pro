package com.git.ifly6;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Scanner;

/**
 * Contains all relevant scripts to the Script menu in the programme.
 * 
 * @author ifly6
 * @since 3.0 All Toolbar>Script Commands go here
 */
public class ScriptCommands extends Console {

	/**
	 * Method runs a Runtime section to purge inactive memory. It relies on a
	 * command inside OSX, called purge.
	 * 
	 * @since 2.3_dev3
	 */
	public static void purge() {
		ExecEngine.exec("purge");
	}

	/**
	 * This is nearly word for word copied from iUtilities v1.0's implementation
	 * 
	 * @since iUtilities v1.0
	 */
	public static void wireless() {
		try {
			ExecEngine.exec("networksetup -setairportpower en0 off");
			Thread.sleep(500);
			ExecEngine.exec("networksetup -setairportpower en0 on");
		} catch (InterruptedException e) {
			log("Airport Restart Failed");
		}
		String outPut = ("Airport Connection Restarted.");
		append(outPut);
		log(outPut);
	}

	/**
	 * This entire section here, is very messy. It has been pruned little since
	 * we just slammed every single thing we could think of into it.
	 * 
	 * @since 2.x (I think)
	 */
	public static void readout() {
		try {
			log("System Readout Invoked.");
			append("Generated By: " + version + " '" + keyword + "' \n");
			append(" -- Current Running Processes -- ");
			String[] com0 = { "ps", "ax" };
			String[] com1 = { "ifconfig" };
			String[] com2 = { "lsof", "-i" };
			Process proc0 = rt.exec(com0);
			Process proc1 = rt.exec(com1);
			Process proc2 = rt.exec(com2);

			InputStream stderr = proc0.getInputStream();
			InputStreamReader isr = new InputStreamReader(stderr);
			Scanner scan = new Scanner(isr);
			while (scan.hasNextLine()) {
				append(scan.nextLine());
			}

			InputStream stderr1 = proc1.getInputStream();
			InputStreamReader isr1 = new InputStreamReader(stderr1);
			scan = new Scanner(isr1);
			append(" -- Internet Interface Information -- ");
			while (scan.hasNextLine()) {
				append(scan.nextLine());
			}

			InputStream stderr2 = proc2.getInputStream();
			InputStreamReader isr2 = new InputStreamReader(stderr2);
			scan = new Scanner(isr2);
			append(" -- Processes Information -- ");
			while (scan.hasNextLine()) {
				append(scan.nextLine());
			}

			// Hardware
			append("");
			append("Note: Due to the nature of Java, there may be errors in the memory readout.");
			append("Available cores: " + rt.availableProcessors());
			append("Free memory (kilobytes): " + (rt.freeMemory() / 1024));
			long maxMemory = rt.maxMemory();
			append("Max. memory (Kilobytes): " + (maxMemory / 1024));
			append("Total memory (Kilobytes): " + (rt.totalMemory() / 1024));
			File[] roots = File.listRoots();
			append("");
			for (File root : roots) {
				append("File System root: " + root.getAbsolutePath());
				append("File System Capacity (bytes): " + root.getTotalSpace());
				append("File System Free (bytes): " + root.getFreeSpace());
				append("File System Usable (bytes): " + root.getUsableSpace());
			}
			append("");
			append(System.getProperty("java.runtime.name") + " version "
					+ System.getProperty("java.runtime.version")
					+ System.getProperty("java.vm.version") + " by "
					+ System.getProperty("java.vm.vendor"));
			append("Execution Directory: " + System.getProperty("user.dir"));
			append("");
			String nameOS = "os.name";
			String versionOS = "os.version";
			append("Operating System: " + System.getProperty(nameOS) + " "
					+ System.getProperty(versionOS));
			append("User: " + System.getProperty("user.name")
					+ " ... with Home at: " + System.getProperty("user.home"));
		} catch (IOException e) {
			log("Readout Failed");
		}
	}

	/**
	 * Method used to download the programme "Mindterm" from mirror at
	 * ifly6.no-ip.org
	 * 
	 * @since 2.1
	 * @see http://www.cryptzone.com/products/mindterm/#editionsstart
	 */
	public static void mindterm() {
		log("Mindterm Download Commenced.");
		String url = "curl -o /Users/" + userName
				+ "/Downloads/ http://ifly6.no-ip.org/Public/mindterm.jar";
		ExecEngine.exec(url);
		append("Mindterm Downloaded to: "
				+ "/Users/"
				+ userName
				+ "/Downloads/"
				+ "\nThis is a full Java Based SSH/Telnet Client, capable of using SSH -D."
				+ "\nIt is however, not made by the Utilities Pro Team, and therefore, does not fall under our perview.");
	}

}
