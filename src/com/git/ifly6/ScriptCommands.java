package com.git.ifly6;

/**
 * @author ifly6
 * @since 3.0
 * All Toolbar>Script Commands go here
 */

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Scanner;

public class ScriptCommands extends Console {

	public static void purge(){
		String[] purge = {"purge"};
		try {
			rt.exec(purge);
		} catch (IOException e) { }
	}
	public static void wireless(){
		try {
			Runtime.getRuntime().exec("networksetup -setairportpower en0 off");
			Thread.sleep(500);
			Runtime.getRuntime().exec("networksetup -setairportpower en0 on");
		} catch (IOException e) {
		} catch (InterruptedException e) { }
		String outPut = ("Airport Connection Restarted.");
		out(outPut);
		log(outPut);
	}
	public static void readout(){
		/**
		 * @author ifly6
		 * @since 2.x (I think)
		 * This entire section here, is very messy. It has been pruned little since we just
		 * slammed every single thing we could think of into it.
		 */
		try {
			log("System Readout Invoked.");
			out("Generated By: " + version + " '" + keyword + "' \n");
			out(" -- Current Running Processes -- ");
			String[] com = { "ps", "ax" };
			String[] com1 = { "ifconfig" };
			String[] com2 = { "lsof", "-i" };
			Process proc = rt.exec(com);
			Process proc1 = rt.exec(com1);
			Process proc2 = rt.exec(com2);

			InputStream stderr = proc.getInputStream();
			InputStreamReader isr = new InputStreamReader(stderr);
			Scanner scan = new Scanner(isr);
			while (scan.hasNextLine()) {
				out(scan.nextLine()); }

			InputStream stderr1 = proc1.getInputStream();
			InputStreamReader isr1 = new InputStreamReader(stderr1);
			scan = new Scanner(isr1);
			out(" -- Internet Interface Information -- ");
			while (scan.hasNextLine()) {
				out(scan.nextLine()); }

			InputStream stderr2 = proc2.getInputStream();
			InputStreamReader isr2 = new InputStreamReader(stderr2);
			scan = new Scanner(isr2);
			out(" -- Processes Information -- ");
			while (scan.hasNextLine()) {
				out(scan.nextLine()); }

			// Hardware
			out("");
			out("Note: Due to the nature of Java, there may be errors in the memory readout.");
			out("Available cores: " + rt.availableProcessors());
			out("Free memory (kilobytes): " + rt.freeMemory()/1024);
			long maxMemory = rt.maxMemory();
			out("Max. memory (Kilobytes): " + maxMemory/1024);
			out("Total memory (Kilobytes): " + (rt.totalMemory()/1024));
			File[] roots = File.listRoots();
			out("");
			for (File root : roots) {
				out("File System root: " + root.getAbsolutePath());
				out("File System Capacity (bytes): " + root.getTotalSpace());
				out("File System Free (bytes): " + root.getFreeSpace());
				out("File System Usable (bytes): " + root.getUsableSpace());
			}
			out("");
			out(System.getProperty("java.runtime.name") + " version " + System.getProperty("java.runtime.version") +
					System.getProperty("java.vm.version") + " by " +
					System.getProperty("java.vm.vendor"));
			out("Execution Directory: " + System.getProperty("user.dir"));
			out("");
			String nameOS = "os.name";
			String versionOS = "os.version";
			out("Operating System: " + System.getProperty(nameOS) + " " + System.getProperty(versionOS));
			out("User: " + System.getProperty("user.name") + " ... with Home at: " + System.getProperty("user.home"));
		} catch (IOException e) { }
	}
	public static void mindterm(){
		log("Mindterm Download Commenced.");
		String[] url = { "curl", "-o", "/Users/" + userName + "/Downloads/", "http://ifly6.no-ip.org/Public/mindterm.jar" };
		try {
			rt.exec(url);
		} catch (IOException e) { }
		out("Mindterm Downloaded to: " + "/Users/" + userName + "/Downloads/" + 
				"\nThis is a full Java Based SSH/Telnet Client, capable of using SSH -D." +
				"\nIt is however, not made by the Utilities Pro Team, and therefore, does not fall under our perview.");
	}

}
