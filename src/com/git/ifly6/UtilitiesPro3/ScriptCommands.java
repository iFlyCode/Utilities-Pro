package com.git.ifly6.UtilitiesPro3;

import java.io.File;

/**
 * Contains all relevant scripts to the Script menu in the programme.
 * 
 * @author ifly6
 * @since 3.0 All Toolbar>Script Commands go here
 */
public class ScriptCommands extends Utilities_Pro {

	/**
	 * Method runs a Runtime section to purge inactive memory. It relies on a
	 * command inside OSX, called purge.
	 * 
	 * @since 2.3_dev3
	 */
	public static void purge() {
		append("Please wait. Purging inactive memory cache...");
		ExecEngine.exec("purge");
	}

	/**
	 * It turns off then 500 milliseconds later, turns on wireless adaptor (en0)
	 * for the computer. This is nearly word for word copied from iUtilities
	 * v1.0's implementation
	 * 
	 * @since iUtilities v1.0
	 */
	public static void wireless() {
		try {
			ExecEngine.exec("networksetup -setairportpower en1 off");
			Thread.sleep(500);
			ExecEngine.exec("networksetup -setairportpower en1 on");
		} catch (InterruptedException e) {
			log("Airport Restart Failed");
		}
		String outPut = ("Airport Connection Restarted.");
		append(outPut);
		log(outPut);
	}

	/**
	 * This is a system using a runtime to get information about the system
	 * which the programme is running upon. This entire section here, is very
	 * messy. It has been pruned little since we just slammed every single thing
	 * we could think of into it.
	 * 
	 * @since 2.2
	 */
	public static void readout() {
		String[] com0 = { "ps", "ax" };
		String[] com1 = { "ifconfig" };
		String[] com2 = { "lsof", "-i" };

		log("System Readout Invoked.");
		append("Generated By: " + version + " '" + keyword + "' \n");

		append(" -- Current Running Processes -- ");
		ExecEngine.exec(com0);
		append(" -- Internet Interface Information -- ");
		ExecEngine.exec(com1);
		append(" -- Processes Information -- ");
		ExecEngine.exec(com2);

		// Hardware
		append("");
		append("Note: Due to the nature of Java, there may be errors in the memory readout.");
		append("Available cores: " + rt.availableProcessors());
		append("Free memory (kilobytes): " + (rt.freeMemory() / 1024));
		long maxMemory = rt.maxMemory();
		append("Max. memory (Kilobytes): " + (maxMemory / 1024));
		append("Total memory (Kilobytes): " + (rt.totalMemory() / 1024));
		File[] roots = File.listRoots();
		append("");
		for (File root : roots) {
			append("File System root: " + root.getAbsolutePath());
			append("File System Capacity (bytes): " + root.getTotalSpace());
			append("File System Free (bytes): " + root.getFreeSpace());
			append("File System Usable (bytes): " + root.getUsableSpace());
		}
		append("");
		append(System.getProperty("java.runtime.name") + " version "
				+ System.getProperty("java.runtime.version")
				+ System.getProperty("java.vm.version") + " by "
				+ System.getProperty("java.vm.vendor"));
		append("Execution Directory: " + System.getProperty("user.dir"));
		append("");
		String nameOS = "os.name";
		String versionOS = "os.version";
		append("Operating System: " + System.getProperty(nameOS) + " "
				+ System.getProperty(versionOS));
		append("User: " + System.getProperty("user.name")
				+ " ... with Home at: " + System.getProperty("user.home"));
	}

	/**
	 * Method used to download the programme "Mindterm" from mirror at
	 * ifly6.no-ip.org
	 * 
	 * @since 2.1
	 * @see {@link http://www.cryptzone.com/products/mindterm/#editionsstart}
	 */
	public static void mindterm() {
		log("Mindterm Download Commenced.");
		ExecEngine.download("http://ifly6.no-ip.org/Public/mindterm.jar",
				Downloads_DIR);
		append("Mindterm Downloaded to: "
				+ Downloads_DIR
				+ "\nThis is a full Java Based SSH/Telnet Client, capable of using SOCKS."
				+ "\nIt is however, not made by the Utilities Pro Team, and therefore, does not fall under our perview.");
	}

}
